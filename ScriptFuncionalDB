DROP DATABASE IF EXISTS Reto2;
CREATE DATABASE Reto2;

USE Reto3;

CREATE TABLE Torneo(
TipoTorneo ENUM('A', 'B'),#PK
    PRIMARY KEY (TipoTorneo)
);#Creada

CREATE TABLE Jugador (
    RangoI INT(5),#PK
    Titulo VARCHAR(10),
    Nombre VARCHAR(50),
    Federacion VARCHAR(20),
    ELO INT(4),
    Nacional INT(10),
    FIDE_ID INT(10),
    ID_Nacional INT(10),
    OrigenClub VARCHAR(30),
    Hotel BOOLEAN,
    Comunidad_Valenciana BOOLEAN,
    RangoF INT(5) DEFAULT NULL,
    TipoTorneo ENUM('A', 'B'),#FK
    PRIMARY KEY (RangoI, TipoTorneo),
    CONSTRAINT fk_jug_torneo FOREIGN KEY (TipoTorneo) REFERENCES Torneo (TipoTorneo) ON DELETE CASCADE ON UPDATE CASCADE
);#Creada

CREATE TABLE Categoria (
TipoCategoria VARCHAR(30),#PK
    Prioridad INT(3),
    PRIMARY KEY (TipoCategoria)
);#Creada

CREATE TABLE Jug_Opta_Categ (
	TipoCategoria VARCHAR(30),#PK, FK
    RangoI INT(5),#PK, FK
    TipoTorneo ENUM('A', 'B'),#FK
    CONSTRAINT fk_jug_opt FOREIGN KEY (RangoI,TipoTorneo) REFERENCES Jugador (RangoI, TipoTorneo) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT fk_prem_opt FOREIGN KEY (TipoCategoria) REFERENCES Categoria (TipoCategoria) ON DELETE CASCADE ON UPDATE CASCADE,
    PRIMARY KEY (TipoCategoria,RangoI, TipoTorneo)
);#Creada

CREATE TABLE Premio (
	TipoCategoria VARCHAR(30), #PK, FK
    Puesto INT(3),#PK
    Importe DECIMAL(10, 2),
    Obtenido BOOLEAN,
    PRIMARY KEY (TipoCategoria, Puesto),
    CONSTRAINT fk_premio_categoria FOREIGN KEY (TipoCategoria) REFERENCES Categoria (TipoCategoria) ON DELETE CASCADE ON UPDATE CASCADE
);#Creada

#Insert
insert into Torneo values('A'),('B');
select * from Torneo;

insert into Categoria values
('General',1),
('SUB2400',2),
('SUB2200',3),
('SUB1800',4),
('SUB1600',5),
('SUB1400',6),
('CV',7),
('Hotel',8);
select * from Categoria;

insert into Premio values 
('General', 1, 2300, 0), -- General
('General', 2, 1200, 0),
('General', 3, 650, 0),
('General', 4, 550, 0),
('General', 5, 500, 0),
('General', 6, 400, 0),
('General', 7, 300, 0),
('General', 8, 250, 0),
('General', 9, 200, 0),
('General', 10, 150, 0),
('General', 11, 100, 0),
('General', 12, 100, 0),
('SUB2400', 1, 225, 0), -- 2400
('SUB2400', 2, 150, 0),
('SUB2400', 3, 120, 0),
('SUB2400', 4, 100, 0),
('SUB2200', 1, 150, 0), -- 2200
('SUB2200', 2, 100, 0),
('SUB1800', 1, 150, 0), -- 1800
('SUB1800', 2, 100, 0),
('SUB1600', 1, 150, 0), -- 1600
('SUB1600', 2, 100, 0),
('SUB1400', 1, 150, 0), -- 1400
('SUB1400', 2, 100, 0),
('CV', 1, 500, 0), -- CV
('CV', 2, 400, 0),
('CV', 3, 300, 0),
('CV', 4, 200, 0),
('CV', 5, 100, 0),
('Hotel', 1, 125, 0), -- Hotel
('Hotel', 2, 125, 0),
('Hotel', 3, 125, 0),
('Hotel', 4, 125, 0),
('Hotel', 5, 125, 0),
('Hotel', 6, 125, 0),
('Hotel', 7, 125, 0),
('Hotel', 8, 125, 0),
('Hotel', 9, 125, 0),
('Hotel', 10, 125, 0),
('Hotel', 11, 125, 0),
('Hotel', 12, 125, 0),
('Hotel', 13, 125, 0),
('Hotel', 14, 125, 0),
('Hotel', 15, 125, 0),
('Hotel', 16, 125, 0),
('Hotel', 17, 125, 0),
('Hotel', 18, 125, 0),
('Hotel', 19, 125, 0),
('Hotel', 20, 125, 0);

-- Calcular Categorias Optadas por Jugador
delimiter //
create procedure jug_premios ()
begin
declare v_RangoI int;
declare v_torneo enum('A', 'B');
declare v_ELO int;
declare v_hotel boolean;
declare v_cv boolean;
declare fin integer default 0;
declare cursor_jug cursor for select RangoI,TipoTorneo,ELO,Hotel,Comunidad_Valenciana from Jugador;
declare continue handler for not found set fin=1;
open cursor_jug;
buc: repeat
fetch cursor_jug into v_RangoI,v_torneo,v_ELO,v_hotel,v_cv;
if fin then
leave buc;
end if;
insert into Jug_Opta_Categ values
('General',v_RangoI,v_torneo);
if (v_ELO<2200 and v_torneo='A') then
insert into Jug_Opta_Categ values #TipoCategoria,Puesto,RangoI,TipoTorneo
('SUB2200',v_RangoI,v_torneo);
end if;
if (v_ELO<2400 and v_torneo='A') then
insert into Jug_Opta_Categ values
('SUB2400',v_RangoI,v_torneo);
end if;
if (v_ELO<1400 and v_torneo='B') then
insert into Jug_Opta_Categ values
('SUB1400',v_RangoI,v_torneo);
end if;
if (v_ELO<1600 and v_torneo='B') then
insert into Jug_Opta_Categ values
('SUB1600',v_RangoI,v_torneo);
end if;
if (v_ELO<1800 and v_torneo='B') then
insert into Jug_Opta_Categ values
('SUB1800',v_RangoI,v_torneo);
end if;
if (v_hotel=1) then
insert into Jug_Opta_Categ values
('Hotel',v_RangoI,v_torneo);
end if;
if (v_cv=1) then
insert into Jug_Opta_Categ values
('CV',v_RangoI,v_torneo);
end if;
until fin = 1 end repeat buc;
close cursor_jug;
end//
DELIMITER ;
CALL jug_premios();




drop procedure if Exists ActualizarTempPremios;
DELIMITER //
CREATE PROCEDURE GetTempPremios()
BEGIN
    DROP TEMPORARY TABLE IF EXISTS TempPremios;
	CREATE TEMPORARY TABLE TempPremios AS
	SELECT jo.TipoTorneo, Puesto, jo.TipoCategoria, Importe, Prioridad FROM Jug_Opta_Categ jo JOIN Jugador j ON j.RangoI=jo.RangoI 
	JOIN Categoria c ON jo.TipoCategoria=c.TipoCategoria JOIN Premio p ON c.TipoCategoria=p.TipoCategoria GROUP BY Puesto, TipoCategoria;
	alter table TempPremios add column RangoI INT(5);
	alter table TempPremios add column RangoF INT(5);
END //
DELIMITER ;

select * from TempPremios;
call GetTempPremios();


drop procedure if Exists test_gan;
DELIMITER //
create procedure test_gan(num int, tipotorneocheck ENUM('A', 'B'))
begin
declare fin int default 0;
declare v_RFinal int;
declare v_RInicial int;
declare v_Torneo enum('A','B');
declare v_TipoCat varchar(30);
declare v_TipoCatAnt varchar(30);
declare v_Importe decimal(10,2);
declare v_ImporteAnt decimal(10,2) default 0;
declare v_Prioridad int(3);
declare v_PrioridadAnt int(3) default 0;
declare v_LimitJugador int;
declare c_tgana cursor for select jo.RangoI,jo.TipoTorneo,jo.TipoCategoria,RangoF
from Jugador j join Jug_Opta_Categ jo on j.RangoI=jo.RangoI
where RangoF=num and j.TipoTorneo=tipotorneocheck;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET fin = 1;
SELECT COUNT(*) INTO @v_LimitJugador FROM Jugador WHERE TipoTorneo = tipotorneocheck;
OPEN c_tgana;
fetch c_tgana into v_RInicial,v_Torneo,v_TipoCat,v_RFinal;
WHILE (fin=0) DO
select @v_ImpMax:=  max(Importe) from TempPremios where TipoCategoria=v_TipoCat and RangoI is null;
select @v_Importe:= Importe from TempPremios where TipoCategoria=v_TipoCat and RangoI is null and Importe=@v_ImpMax limit 1;
select @v_Prioridad:= Prioridad from TempPremios where TipoCategoria=v_TipoCat and RangoI is null and Importe=@v_ImpMax limit 1;
if (@v_Importe>v_ImporteAnt) then
set v_TipoCatAnt=v_TipoCat;
set v_ImporteAnt=@v_Importe;
set v_PrioridadAnt=@v_Prioridad;
elseif (@v_Importe=v_ImporteAnt) then
if (@v_Prioridad<v_PrioridadAnt) then
set v_TipoCatAnt=v_TipoCat;
set v_ImporteAnt=@v_Importe;
set v_PrioridadAnt=@v_Prioridad;
end if;
end if;
fetch c_tgana into v_RInicial,v_Torneo,v_TipoCat,v_RFinal;
END WHILE;
update TempPremios set RangoI=v_RInicial, RangoF=v_RFinal where TipoCategoria=v_TipoCatAnt and Importe=v_ImporteAnt and Prioridad=v_PrioridadAnt and RangoI is null limit 1;
CLOSE c_tgana;
end//
DELIMITER ;
select * from TempPremios;

DROP PROCEDURE IF EXISTS bucle;
DELIMITER //
CREATE PROCEDURE bucle(tipotorneocheck ENUM('A', 'B'))
BEGIN
	DECLARE v_RFinalIterar INT default 1;
    SELECT COUNT(*) INTO @v_LimitJugador FROM Jugador WHERE TipoTorneo = tipotorneocheck;
    UPDATE TempPremios SET RangoI = NULL, RangoF = NULL;
    WHILE (v_RFinalIterar < @v_LimitJugador) DO
		CALL test_gan(v_RFinalIterar, tipotorneocheck);
        set v_RFinalIterar = v_RFinalIterar + 1;
	END WHILE;
END//
DELIMITER ;

CALL jug_premios();
CALL bucle('A');

select * from TempPremios;

# Procedimientos a ejecutar:
# 1) jug_premios() - Calcula las categorias a las que opta el jugador
# 2) GetTempPremios() - Para calcular en la tabla temporal los premios que PUEDE GANAR el jugador
# 3) bucle(TIPO-TORNEO) - Para iterar en test_gan los rangos finales
# 4*) test_gan(RangoF, TIPO-TORNEO) - Asignar premios en tabla temporal * Se ejecuta automÃ¡ticamente con el procedimiento bucle();

